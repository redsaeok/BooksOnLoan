#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Creating the Project

#!markdown

This will be an MVC project that uses Sqlite and authentication.

#!markdown

To create an MVC project with authentication and Sqlite...

dotnet new mvc --auth individual -o BooksOnLoan

#!markdown

Looking at the files generated by this, we have a few to note.

app.db - the sqlite database to hold our books, transactions, and authentication data

appsettings.json & appsettings.Development.json - the application configuration including the DbContext Connection string

HomeController - the default controller

ApplicationDbContext - more down below...

Migrations - Interesting, I don't think we discussed that the template includes migrations for the Identity Schema

Program.cs - 

Views - The default views

Shared\_Layout.cshtml - the shared layout file, we need to change this to edit the menu

#!markdown

```bash
├── app.db
├── appsettings.Development.json
├── appsettings.json
├── Areas
│   └── Identity
│       └── Pages
│           └── _ViewStart.cshtml
├── BooksOnLoan.csproj
├── Controllers
│   └── HomeController.cs
├── Data
│   ├── ApplicationDbContext.cs
│   └── Migrations
│       ├── 00000000000000_CreateIdentitySchema.cs
│       ├── 00000000000000_CreateIdentitySchema.Designer.cs
│       └── ApplicationDbContextModelSnapshot.cs
├── Models
│   └── ErrorViewModel.cs
├── Program.cs
├── Properties
│   └── launchSettings.json
├── Views
│   ├── Home
│   │   ├── Index.cshtml
│   │   └── Privacy.cshtml
│   ├── Shared
│   │   ├── Error.cshtml
│   │   ├── _Layout.cshtml
│   │   ├── _Layout.cshtml.css
│   │   ├── _LoginPartial.cshtml
│   │   └── _ValidationScriptsPartial.cshtml
│   ├── _ViewImports.cshtml
│   └── _ViewStart.cshtml
└── wwwroot
    ├── css
    │   └── site.css
    ├── favicon.ico
    ├── js
    │   └── site.js
    └── lib
        ├── bootstrap
     ├── jquery

```

#!markdown

** Previously we used --use-local-db with the above command to use SQL server authentication.  Without the switch, it will default to sqlite.  Note the app.db file.

#!markdown

# Adding NuGet Packages for Support

#!markdown

```bash
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.EntityFrameworkCore.Sqlite.Design
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson
dotnet add package Microsoft.EntityFrameworkCore.SqlServer  <- For Scaffolding Controllers (?)

```

#!markdown

# Database Context

#!markdown

The auto generated database context extends IdentityDbContext so that we have individual authentication support.

#!markdown

```csharp
// Data/ApplicaitonDbContext.cs

public class ApplicationDbContext : IdentityDbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }
}
```

#!markdown

# Adding Roles to the Database 

#!markdown

```csharp
// Data/ApplicaitonDbContext.cs

protected override void OnModelCreating(ModelBuilder builder)
{
    base.OnModelCreating(builder);

    #region "Seed Data"

    builder.Entity<IdentityRole>().HasData(
        new { Id = "1", Name = "Admin", NormalizedName = "ADMIN" },
        new { Id = "2", Name = "Member", NormalizedName = "MEMBER" }
    );

    #endregion
}
```    

#!markdown

# Database Connection String

#!markdown

The autogenerated appsettings.json has a data source pointing to the local sqlite database app.db

#!markdown

```json
{
  "ConnectionStrings": {
    "DefaultConnection": "DataSource=app.db;Cache=Shared"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
```

#!markdown

# Data Objects

#!markdown

Since this is a code first application we'll have to define our data objects, create a migration, and apply them to the database.

#!markdown

# Models

#!markdown

** I still need to add annotation to indicate CodeNumber is an auto incrementing primary key

** This is done now by using the DatabaseGenerated(DatabaseGeneratedOption.Identity) annotation.

#!markdown

```csharp
// Models/Book.cs

public class Book
{
    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int CodeNumber { get; set; }
    [Required]
    public required string Author { get; set; }    
    [Required]
    public required string Title { get; set; }
    [Required]
    public int YearPublished { get; set; }
    [Required]
    public int Quantity { get; set; }
}
```

#!markdown

So many iterations of this...

#!markdown

```csharp
// Models/Transaction.cs

public class Transaction
{
    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int TransactionId { get; set; }
    
    public int BookCodeNumber { get; set; }

    //public int TransactionTypeId { get; set; }

    public string? Username { get; set; }

    public DateOnly HoldDate { get; set; }
    public DateOnly LoanStartDate { get; set; }
    public DateOnly LoanDueDate { get; set; }
    public DateOnly ReturnDate { get; set; }

    [ForeignKey("BookCodeNumber")]
    public Book? Book { get; set; }

    //[ForeignKey("TransactionTypeId")]
    //public TransactionType? TransactionType { get; set; }

}
```

#!markdown

# Sample Data

#!markdown

```csharp
// Data/SampleData.cs

public class SampleData
{
    public static List<Book> GetBooks()
    {
        List<Book> books = new List<Book>
        {
            new Book
            {
                CodeNumber = 1,
                Author = "Andrew Chevallier",
                Title = "Encyclopedia of Herbal Medicine: 550 Herbs and Remedies for Common Ailments",
                YearPublished = 2016,
                Quantity = 1
            },
            new Book
            {
                CodeNumber = 2,
                Author = "Michael T. Murray M.D. and Joseph Pizzorno",
                Title = "The Encyclopedia of Natural Medicine Third Edition",
                YearPublished = 2012,
                Quantity = 3
            },
            new Book
            {
                CodeNumber = 3,
                Author = "Thomas Easley and Steven Horne",
                Title = "The Modern Herbal Dispensatory: A Medicine-Making Guide",
                YearPublished = 2016,
                Quantity = 1
            },
            new Book
            {
                CodeNumber = 4,
                Author = "Cat Ellis",
                Title = "Prepper's Natural Medicine: Life-Saving Herbs, Essential Oils and Natural Remedies for When There is No Doctor",
                YearPublished = 2015,
                Quantity = 2
            },
            new Book
            {
                CodeNumber = 5,
                Author = "Rosemary Gladstar",
                Title = "Rosemary Gladstar's Medicinal Herbs: A Beginner's Guide: 33 Healing Herbs to Know, Grow, and Use",
                YearPublished = 2012,
                Quantity = 1
            }
        };
        return books;
    }
}
```

#!markdown

# Creating a Migration to add the Roles

#!markdown

Use the command `dotnet ef migrations add M1 -o Data/Migrations` to create a M1 migration.

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef migrations add M1 -o Data/Migrations
Build started...
Build succeeded.
Done. To undo this action, use 'ef migrations remove'
```

#!markdown

Checking for Roles

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ sqlite3 app.db 
SQLite version 3.37.2 2022-01-06 13:25:41
Enter ".help" for usage hints.
sqlite> .tables
AspNetRoleClaims       AspNetUserLogins       AspNetUsers          
AspNetRoles            AspNetUserRoles        __EFMigrationsHistory
AspNetUserClaims       AspNetUserTokens     
sqlite> select * from AspnetRoles;

Error: in prepare, near "quit": syntax error (1)
sqlite> .quit
```

#!markdown

Use the command `dotnet ef database update` to apply our migration.  Note, it does not appear to add our books or transactions.  Is this because there's no DbSet in the DBcontext?

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef database update
Build started...
Build succeeded.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT "MigrationId", "ProductVersion"
      FROM "__EFMigrationsHistory"
      ORDER BY "MigrationId";
info: Microsoft.EntityFrameworkCore.Migrations[20402]
      Applying migration '20240218173145_M1'.
Applying migration '20240218173145_M1'.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
      VALUES ('1', NULL, 'Admin', 'ADMIN');
      SELECT changes();
      
      INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
      VALUES ('2', NULL, 'Member', 'MEMBER');
      SELECT changes();
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
      VALUES ('20240218173145_M1', '8.0.1');
Done.
```bash

#!markdown

On the plus side we do now have our roles, so we should be able to go ahead and create our users.  ?? How do we associate users with a role ??

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ sqlite3 app.db 
SQLite version 3.37.2 2022-01-06 13:25:41
Enter ".help" for usage hints.
sqlite> .tables
AspNetRoleClaims       AspNetUserLogins       AspNetUsers          
AspNetRoles            AspNetUserRoles        __EFMigrationsHistory
AspNetUserClaims       AspNetUserTokens     
sqlite> select * from AspnetRoles;
1||Admin|ADMIN
2||Member|MEMBER
sqlite> 
```

#!markdown

# Creating and Migrating the Books and Transactions

#!markdown

Let's try a new migration for the Book and Transaction business objects.  I've updated the DbContext class to include them as DbSet properties, and added a few more lines to the OnModelCreating() method to map them to tables and populate the sample data for the books.

#!markdown

```csharp
public class ApplicationDbContext : IdentityDbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);

        #region "Seed Data"

        builder.Entity<IdentityRole>().HasData(
            new { Id = "1", Name = "Admin", NormalizedName = "ADMIN" },
            new { Id = "2", Name = "Member", NormalizedName = "MEMBER" }
        );

        builder.Entity<Book>().ToTable("Book");
        builder.Entity<Transaction>().ToTable("Transaction");
        
        // data will be added here.
        builder.Entity<Book>().HasData(SampleData.GetBooks());

        #endregion
    }

    public DbSet<Book>? Inventory { get; set; }
    public DbSet<Transaction>? Transactions { get; set; }
}
```

#!markdown

Use the command `dotnet ef migrations add M2 -o Data/Migrations` to create a M2 migration.

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef migrations add M2 -o Data/Migrations
Build started...
Build succeeded.
Done. To undo this action, use 'ef migrations remove'
```

#!markdown

Use the command `dotnet ef database update` to apply our migration.  Note, it does not appear to add our books or transactions.  Is this because there's no DbSet in the DBcontext?

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef database update
Build started...
Build succeeded.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (6ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT "MigrationId", "ProductVersion"
      FROM "__EFMigrationsHistory"
      ORDER BY "MigrationId";
info: Microsoft.EntityFrameworkCore.Migrations[20402]
      Applying migration '20240218174801_M2'.
Applying migration '20240218174801_M2'.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "Book" (
          "CodeNumber" INTEGER NOT NULL CONSTRAINT "PK_Book" PRIMARY KEY,
          "Author" TEXT NOT NULL,
          "Title" TEXT NOT NULL,
          "YearPublished" INTEGER NOT NULL,
          "Quantity" INTEGER NOT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "Transaction" (
          "TransactionId" INTEGER NOT NULL CONSTRAINT "PK_Transaction" PRIMARY KEY AUTOINCREMENT,
          "BookCodeNumber" INTEGER NOT NULL,
          "Type" INTEGER NOT NULL,
          "StartDate" TEXT NOT NULL,
          "EndDate" TEXT NOT NULL
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "Book" ("CodeNumber", "Author", "Quantity", "Title", "YearPublished")
      VALUES (1, 'Andrew Chevallier', 1, 'Encyclopedia of Herbal Medicine: 550 Herbs and Remedies for Common Ailments', 2016);
      SELECT changes();
      
      INSERT INTO "Book" ("CodeNumber", "Author", "Quantity", "Title", "YearPublished")
      VALUES (2, 'Michael T. Murray M.D. and Joseph Pizzorno', 3, 'The Encyclopedia of Natural Medicine Third Edition', 2012);
      SELECT changes();
      
      INSERT INTO "Book" ("CodeNumber", "Author", "Quantity", "Title", "YearPublished")
      VALUES (3, 'Thomas Easley and Steven Horne', 1, 'The Modern Herbal Dispensatory: A Medicine-Making Guide', 2016);
      SELECT changes();
      
      INSERT INTO "Book" ("CodeNumber", "Author", "Quantity", "Title", "YearPublished")
      VALUES (4, 'Cat Ellis', 2, 'Prepper''s Natural Medicine: Life-Saving Herbs, Essential Oils and Natural Remedies for When There is No Doctor', 2015);
      SELECT changes();
      
      INSERT INTO "Book" ("CodeNumber", "Author", "Quantity", "Title", "YearPublished")
      VALUES (5, 'Rosemary Gladstar', 1, 'Rosemary Gladstar''s Medicinal Herbs: A Beginner''s Guide: 33 Healing Herbs to Know, Grow, and Use', 2012);
      SELECT changes();
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
      VALUES ('20240218174801_M2', '8.0.1');
Done.
```

#!markdown

Well this looks promising, I see SQL for the Book and Transaction objects, including the sample data.  Sqlite3 confirms we have our missing tables and data now.

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ sqlite3 app.db
SQLite version 3.37.2 2022-01-06 13:25:41
Enter ".help" for usage hints.
sqlite> .tables
AspNetRoleClaims       AspNetUserRoles        Transaction          
AspNetRoles            AspNetUserTokens       __EFMigrationsHistory
AspNetUserClaims       AspNetUsers          
AspNetUserLogins       Book                 
sqlite> select * from Book;
1|Andrew Chevallier|Encyclopedia of Herbal Medicine: 550 Herbs and Remedies for Common Ailments|2016|1
2|Michael T. Murray M.D. and Joseph Pizzorno|The Encyclopedia of Natural Medicine Third Edition|2012|3
3|Thomas Easley and Steven Horne|The Modern Herbal Dispensatory: A Medicine-Making Guide|2016|1
4|Cat Ellis|Prepper's Natural Medicine: Life-Saving Herbs, Essential Oils and Natural Remedies for When There is No Doctor|2015|2
5|Rosemary Gladstar|Rosemary Gladstar's Medicinal Herbs: A Beginner's Guide: 33 Healing Herbs to Know, Grow, and Use|2012|1
sqlite> 
```

#!markdown

# Creating the Users

#!markdown

I logged into the website and created the accounts.

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ sqlite3 app.db 
SQLite version 3.37.2 2022-01-06 13:25:41
Enter ".help" for usage hints.
sqlite> select * from AspnetUsers;
f6ba57a8-57c6-4ab7-af9a-36f19afd6d19|0|044e7e75-8ab6-4c39-b687-83d22a9debd0|aa@aa.aa|1|1||AA@AA.AA|AA@AA.AA|AQAAAAIAAYagAAAAEEDnnSjoTsgzU0TRq+cUHvVmaZU4eRbDE+qN7mP6FO9cvwMZ7TwHmyswYpmBy+otew==||0|KOYU2XPZ75WFYBW6EDVJS6SN5ILSDJZZ|0|aa@aa.aa
5e95d8d9-297c-48a4-b573-09ca68af540d|0|aecc7630-5c22-4d15-b165-84f7c706739a|mm@mm.mm|1|1||MM@MM.MM|MM@MM.MM|AQAAAAIAAYagAAAAEGFrnkWzsrhZ2pj+ABwgFS1Qvami9Z81uDqyaoyJuK9ubsjlC3AcBm8yi18Ghw3Aqg==||0|6PIZKKTC2TKKIBL3REQAX44XTWANUT3E|0|mm@mm.mm
sqlite> 
```

#!markdown

# Adding a 1:M relationship between Book and Transaction

#!markdown

At the very least we need a list of transactions, List<Transaction> Transactions, property.

#!markdown

```csharp

// Models/Book.cs

public class Book
{
    [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int CodeNumber { get; set; }
    [Required]
    public required string Title { get; set; }
    [Required]
    public required string Author { get; set; }    
    [Required]
    public int YearPublished { get; set; }
    [Required]
    public int Quantity { get; set; }    

    public List<Transaction>? Transactions { get; set; }
}
```

#!markdown

Updating the database with the following,

```
dotnet ef migrations add M3 -o Data/Migrations
dotnet ef database update
```

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef migrations add M3 -o Data/Migrations
Build started...
Build succeeded.
Done. To undo this action, use 'ef migrations remove'
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet ef database update
Build started...
Build succeeded.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (5ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*) FROM "sqlite_master" WHERE "name" = '__EFMigrationsHistory' AND "type" = 'table';
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT "MigrationId", "ProductVersion"
      FROM "__EFMigrationsHistory"
      ORDER BY "MigrationId";
info: Microsoft.EntityFrameworkCore.Migrations[20402]
      Applying migration '20240218183259_M3'.
Applying migration '20240218183259_M3'.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_Transaction_BookCodeNumber" ON "Transaction" ("BookCodeNumber");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE TABLE "ef_temp_Transaction" (
          "TransactionId" INTEGER NOT NULL CONSTRAINT "PK_Transaction" PRIMARY KEY AUTOINCREMENT,
          "BookCodeNumber" INTEGER NOT NULL,
          "EndDate" TEXT NOT NULL,
          "StartDate" TEXT NOT NULL,
          "Type" INTEGER NOT NULL,
          CONSTRAINT "FK_Transaction_Book_BookCodeNumber" FOREIGN KEY ("BookCodeNumber") REFERENCES "Book" ("CodeNumber") ON DELETE CASCADE
      );
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "ef_temp_Transaction" ("TransactionId", "BookCodeNumber", "EndDate", "StartDate", "Type")
      SELECT "TransactionId", "BookCodeNumber", "EndDate", "StartDate", "Type"
      FROM "Transaction";
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys = 0;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      DROP TABLE "Transaction";
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      ALTER TABLE "ef_temp_Transaction" RENAME TO "Transaction";
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      PRAGMA foreign_keys = 1;
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      CREATE INDEX "IX_Transaction_BookCodeNumber" ON "Transaction" ("BookCodeNumber");
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
      VALUES ('20240218183259_M3', '8.0.1');
Done.
```

#!markdown

# Scaffold the Inventory Controller

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet aspnet-codegenerator controller -name InventoryController -outDir Controllers -m Book -dc ApplicationDbContext -udl -scripts
Building project ...
Finding the generator 'controller'...
Running the generator 'controller'...

Minimal hosting scenario!
Attempting to figure out the EntityFramework metadata for the model and DbContext: 'Book'

Using database provider 'Microsoft.EntityFrameworkCore.Sqlite'!

Added Controller : '/Controllers/InventoryController.cs'.
Added View : /Views/Inventory/Create.cshtml
Added View : /Views/Inventory/Edit.cshtml
Added View : /Views/Inventory/Details.cshtml
Added View : /Views/Inventory/Delete.cshtml
Added View : /Views/Inventory/Index.cshtml
RunTime 00:00:06.06
```

#!markdown

# Test the Controller

#!markdown

We can now successfully browse to http://localhost:5103/inventory/index  

We have right to Add/Edit/Delete  This might be fine for the Admin, but not for a member.

I'm not quite sure how to handle this.  Maybe the Member should see a custom controller and view.

#!markdown

# Scaffold the Transaction Controller

#!markdown

dotnet aspnet-codegenerator controller -name TransactionController -outDir Controllers -m Transaction -dc ApplicationDbContext -udl -scripts

#!markdown

```bash
johnglenn@dotnetubuntu24:~/COMP4602/A01/BooksOnLoan$ dotnet aspnet-codegenerator controller -name TransactionController -outDir Controllers -m Transaction -dc ApplicationDbContext -udl -scripts
Building project ...
Finding the generator 'controller'...
Running the generator 'controller'...

Minimal hosting scenario!
Attempting to figure out the EntityFramework metadata for the model and DbContext: 'Transaction'

Using database provider 'Microsoft.EntityFrameworkCore.Sqlite'!

Added Controller : '/Controllers/TransactionController.cs'.
Added View : /Views/Transaction/Create.cshtml
Added View : /Views/Transaction/Edit.cshtml
Added View : /Views/Transaction/Details.cshtml
Added View : /Views/Transaction/Delete.cshtml
Added View : /Views/Transaction/Index.cshtml
RunTime 00:00:05.81
```

#!markdown

http://localhost:5103/transaction/index

#!markdown

# Updating the Transaction Lookups

#!markdown

We can modify the SelectList assigned to the lookup fields to use the properties we want to lookup by.

#!markdown

```csharp
// Controllers/TransactionController.cs

public IActionResult Create()
{
    ViewData["BookCodeNumber"] = new SelectList(_context.Inventory, "CodeNumber", "Title");
    ViewData["TransactionTypeId"] = new SelectList(_context.TransactionTypes, "TransactionTypeID", "Description");
    return View();
}
```

#!markdown

# Adding Security to Menu

#!markdown

Locking Down the Menu

#!markdown

```html
<!-- Add the link to the navigation menu -->

<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
<div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
    <ul class="navbar-nav flex-grow-1">
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
        </li>
        @if (User.Identity.IsAuthenticated)
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-page="/MemberPages/Index">Members</a>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
        </li>
    </ul>
    <partial name="_LoginPartial" />
</div>
```

#!markdown

Locking Down the View

#!markdown

```csharp
// Views/Shared/_Layout.cshtml

@{
    // redirect back to the main page if the user is not authenticated
    if (User.Identity is null || !User.Identity.IsAuthenticated)
    {
        Response.Redirect("/");
    }

    ViewData["Title"] = "Create";
}
```

#!markdown

# Questions

How can you add individual authentication after you've created a project?

How can you add roles after you've created a project?

How can you assign roles to users?

When we link models, sometimes we see a different field for the lookup instead of the primary key.  It appears like we can change this in the controller.  Should we change the auto generated controller, is there a way to do this with data annotations perhaps so we can regenerate the controller without having to redo this change?

How can I lookup and link user records from the identity tables?

Should we be creating custom Controllers and Views?

Should we be writing custom queries and stored procedures?  How would we use this with an MVC application?

Why is it asking for a transaction id?  The DB should be generating it automatically.

How will we send an e-mail for overdue books?

Can we create a view for overdue books?

How can I add a Reserve button?

How can I add a return button?

Do I need the transaction type for reserver/return if I can't have one without the other?

With Code First How do I specify a Key should be auto incrementing in the database?

Is there a data annotation I can add to a model to include a data lookup in the view?

View - List of Books with holds that are available to send out.

View - List of Overdue books.

View - List of my Books

Action - Lend Out a Book

View - List of my Requests

Why is my REturn Date field required?
