@rendermode InteractiveServer
@inject ILogger<ItemList> Logger

@{
    Logger.LogInformation($"DatePicker: Fieldname: {FieldName}");
    Logger.LogInformation($"DatePicker: Label: {Label}");    
    Logger.LogInformation($"DatePicker: Input Value: {Value}");    
    Logger.LogInformation($"DatePicker: Output value before load: {value}"); 

    bool isValidDate = DateTime.TryParseExact(
        Value,
        "MM-dd-yyyy",
        System.Globalization.CultureInfo.InvariantCulture,
        System.Globalization.DateTimeStyles.None,
        out _);    

    // set the component date value if it isn't already set and we have one to set it to
    if( value == DateTime.MinValue && isValidDate)
    {
        value = DateTime.ParseExact(Value!, "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
    }

    //value = DateTime.ParseExact("10-27-1977", "MM-dd-yyyy", System.Globalization.CultureInfo.InvariantCulture);
    //Logger.LogInformation($"DatePicker: {isValidDate}");
    Logger.LogInformation($"DatePicker: Output value after load {value}");
}


<div class="rz-p-12 rz-text-align-center">
    <RadzenLabel 
        Text="@Label" 
        Component="RadzenDatePickerBindValue" 
        Style="margin-right: 8px; vertical-align: middle;" 
    />

    <RadzenDatePicker 
        @bind-Value=@value 
        DateFormat="MM-dd-yyyy" 
        Name="@FieldName"
        ShowCalendarWeek 
        Change=@OnChange
    />
</div>

@code {
    DateTime value;

    [Parameter]
    public String? FieldName { get; set; }    

    [Parameter]
    public String? Label { get; set; }    

    [Parameter]
    public String? Value { get; set; }      

    void OnChange(DateTime? newValue)
    {
        Logger.LogInformation($"DatePicker.OnChange Called");        
        value = newValue ?? value;
        Logger.LogInformation($"New Value: {newValue}");  
        Logger.LogInformation($"Value: {value}");
    }          
}

