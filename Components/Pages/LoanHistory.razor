@rendermode InteractiveServer
@inject ILogger<ItemList> Logger
@inject ApplicationDbContext DbContext



<RadzenChart>
    <RadzenColumnSeries Data="@revenue" CategoryProperty="Quarter" ValueProperty="Revenue" Title="Loans"/>
    <RadzenValueAxis>
        <RadzenAxisTitle Text="Loans" />
    </RadzenValueAxis>
    <RadzenCategoryAxis>
        <RadzenAxisTitle Text="Quarter" />
    </RadzenCategoryAxis>
    <RadzenLegend Position="LegendPosition.Bottom" />
</RadzenChart>

@code {
    static private Dictionary<string, int> loansByQuarter = new Dictionary<string, int>();
    static private string[] keys = new string[0];

    class DataItem
    {
        public string? Quarter { get; set; }
        public double Revenue { get; set; }
    }

    DataItem[] revenue = new DataItem[]
    {
        new DataItem { Quarter = "Q1", Revenue = 146300 },
        new DataItem { Quarter = "Q2", Revenue = 284000 },
        new DataItem { Quarter = "Q3", Revenue = 274000 },
        new DataItem { Quarter = "Q4", Revenue = 294000 }
    };

    protected override void OnInitialized()
    {
        var currentDate = DateOnly.FromDateTime(DateTime.Today);

        var allQuarters = Enumerable.Range(0, 4)
        .Select(i => currentDate.AddMonths(-i * 3))
        .Select(date => new { Year = date.Year, Quarter = (date.Month - 1) / 3 + 1 })
        .Distinct();

        var loansLastFourQuarters = allQuarters
        .GroupJoin(DbContext.Transactions!
        .Where(t => t.LoanStartDate.HasValue && t.LoanStartDate.Value >= currentDate.AddMonths(-12)),
        quarter => quarter,
        loan => new { loan.LoanStartDate!.Value.Year, Quarter = (loan.LoanStartDate.Value.Month - 1) / 3 + 1 },
        (quarter, loans) => new
        {
            Year = quarter.Year,
            Quarter = quarter.Quarter,
            NumberOfLoans = loans.Count()
        })
        .ToList();

        loansByQuarter = loansLastFourQuarters
        .ToDictionary(x => $"{x.Year} Q{x.Quarter}", x => x.NumberOfLoans);

        keys = loansByQuarter.Keys.ToArray();

        @*
foreach (var item in loansLastFourQuarters)
{
Logger.LogInformation($"Year: {item.Year}, Quarter: {item.Quarter}, Number of Loans: {item.NumberOfLoans}");
}
*@

        foreach (var key in keys)
        {
            Logger.LogInformation($"Key: {key}, Value: {loansByQuarter[key]}");
        }

        revenue = new DataItem[]
        {
            new DataItem { Quarter = @keys[3], Revenue = @loansByQuarter[keys[3]] },
            new DataItem { Quarter = @keys[2], Revenue = @loansByQuarter[keys[2]] },
            new DataItem { Quarter = @keys[1], Revenue = @loansByQuarter[keys[1]] },
            new DataItem { Quarter = @keys[0], Revenue = @loansByQuarter[keys[0]] }
        };
    }
}